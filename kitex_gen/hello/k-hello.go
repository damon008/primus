// Code generated by Kitex v0.5.0. DO NOT EDIT.

package hello

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
)

type HelloServiceEchoArgs struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewHelloServiceEchoArgs() *HelloServiceEchoArgs {
	return &HelloServiceEchoArgs{}
}

var HelloServiceEchoArgs_Req_DEFAULT *Request

func (p *HelloServiceEchoArgs) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return HelloServiceEchoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HelloServiceEchoArgs) SetReq(val *Request) {
	p.Req = val
}

func (p *HelloServiceEchoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HelloServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceEchoArgs(%+v)", *p)
}
func (p *HelloServiceEchoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HelloServiceEchoResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewHelloServiceEchoResult() *HelloServiceEchoResult {
	return &HelloServiceEchoResult{}
}

var HelloServiceEchoResult_Success_DEFAULT *Response

func (p *HelloServiceEchoResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return HelloServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HelloServiceEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *HelloServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceEchoResult(%+v)", *p)
}
func (p *HelloServiceEchoResult) GetResult() interface{} {
	return p.Success
}

type HelloServiceGetArgs struct {
}

func NewHelloServiceGetArgs() *HelloServiceGetArgs {
	return &HelloServiceGetArgs{}
}

func (p *HelloServiceGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceGetArgs(%+v)", *p)
}
func (p *HelloServiceGetArgs) GetFirstArgument() interface{} {
	return nil
}

type HelloServiceGetResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewHelloServiceGetResult() *HelloServiceGetResult {
	return &HelloServiceGetResult{}
}

var HelloServiceGetResult_Success_DEFAULT *Response

func (p *HelloServiceGetResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return HelloServiceGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HelloServiceGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *HelloServiceGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloServiceGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceGetResult(%+v)", *p)
}
func (p *HelloServiceGetResult) GetResult() interface{} {
	return p.Success
}

type HelloServiceGetByParamsArgs struct {
	Data string `thrift:"data,1" frugal:"1,default,string" json:"data"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewHelloServiceGetByParamsArgs() *HelloServiceGetByParamsArgs {
	return &HelloServiceGetByParamsArgs{}
}

func (p *HelloServiceGetByParamsArgs) GetData() (v string) {
	return p.Data
}

func (p *HelloServiceGetByParamsArgs) GetMsg() (v string) {
	return p.Msg
}
func (p *HelloServiceGetByParamsArgs) SetData(val string) {
	p.Data = val
}
func (p *HelloServiceGetByParamsArgs) SetMsg(val string) {
	p.Msg = val
}

func (p *HelloServiceGetByParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceGetByParamsArgs(%+v)", *p)
}
func (p *HelloServiceGetByParamsArgs) GetFirstArgument() interface{} {
	return p.Data
}

type HelloServiceGetByParamsResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewHelloServiceGetByParamsResult() *HelloServiceGetByParamsResult {
	return &HelloServiceGetByParamsResult{}
}

var HelloServiceGetByParamsResult_Success_DEFAULT *Response

func (p *HelloServiceGetByParamsResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return HelloServiceGetByParamsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HelloServiceGetByParamsResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *HelloServiceGetByParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloServiceGetByParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceGetByParamsResult(%+v)", *p)
}
func (p *HelloServiceGetByParamsResult) GetResult() interface{} {
	return p.Success
}

type HelloServiceGetHArgs struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
}

func NewHelloServiceGetHArgs() *HelloServiceGetHArgs {
	return &HelloServiceGetHArgs{}
}

func (p *HelloServiceGetHArgs) GetId() (v int32) {
	return p.Id
}
func (p *HelloServiceGetHArgs) SetId(val int32) {
	p.Id = val
}

func (p *HelloServiceGetHArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceGetHArgs(%+v)", *p)
}
func (p *HelloServiceGetHArgs) GetFirstArgument() interface{} {
	return p.Id
}

type HelloServiceGetHResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewHelloServiceGetHResult() *HelloServiceGetHResult {
	return &HelloServiceGetHResult{}
}

var HelloServiceGetHResult_Success_DEFAULT *Response

func (p *HelloServiceGetHResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return HelloServiceGetHResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HelloServiceGetHResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *HelloServiceGetHResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloServiceGetHResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceGetHResult(%+v)", *p)
}
func (p *HelloServiceGetHResult) GetResult() interface{} {
	return p.Success
}

type HelloServicePostArgs struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewHelloServicePostArgs() *HelloServicePostArgs {
	return &HelloServicePostArgs{}
}

var HelloServicePostArgs_Req_DEFAULT *Request

func (p *HelloServicePostArgs) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return HelloServicePostArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *HelloServicePostArgs) SetReq(val *Request) {
	p.Req = val
}

func (p *HelloServicePostArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HelloServicePostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServicePostArgs(%+v)", *p)
}
func (p *HelloServicePostArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HelloServicePostResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewHelloServicePostResult() *HelloServicePostResult {
	return &HelloServicePostResult{}
}

var HelloServicePostResult_Success_DEFAULT *Response

func (p *HelloServicePostResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return HelloServicePostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HelloServicePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *HelloServicePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloServicePostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServicePostResult(%+v)", *p)
}
func (p *HelloServicePostResult) GetResult() interface{} {
	return p.Success
}
