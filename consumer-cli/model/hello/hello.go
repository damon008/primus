// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package hello

import (
	"context"
	"fmt"
)

type ReqBody struct {
	Name  string `thrift:"name,1" form:"name" json:"name" query:"name"`
	Type  int32  `thrift:"type,2" form:"type" json:"type" query:"type"`
	Email string `thrift:"email,3" form:"email" json:"email" query:"email"`
}

func NewReqBody() *ReqBody {
	return &ReqBody{}
}

func (p *ReqBody) GetName() (v string) {
	return p.Name
}

func (p *ReqBody) GetType() (v int32) {
	return p.Type
}

func (p *ReqBody) GetEmail() (v string) {
	return p.Email
}

func (p *ReqBody) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReqBody(%+v)", *p)
}

type Request struct {
	Data    string   `thrift:"data,1" form:"data" json:"data" query:"data"`
	Message string   `thrift:"message,2" form:"message" json:"message" query:"message"`
	ReqBody *ReqBody `thrift:"reqBody,3" form:"reqBody" json:"reqBody" query:"reqBody"`
}

func NewRequest() *Request {
	return &Request{}
}

func (p *Request) GetData() (v string) {
	return p.Data
}

func (p *Request) GetMessage() (v string) {
	return p.Message
}

var Request_ReqBody_DEFAULT *ReqBody

func (p *Request) GetReqBody() (v *ReqBody) {
	if !p.IsSetReqBody() {
		return Request_ReqBody_DEFAULT
	}
	return p.ReqBody
}

func (p *Request) IsSetReqBody() bool {
	return p.ReqBody != nil
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

type Msg struct {
	Code int32  `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
}

func NewMsg() *Msg {
	return &Msg{}
}

func (p *Msg) GetCode() (v int32) {
	return p.Code
}

func (p *Msg) GetMsg() (v string) {
	return p.Msg
}

func (p *Msg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Msg(%+v)", *p)
}

type Response struct {
	Msg  *Msg   `thrift:"msg,1" form:"msg" json:"msg" query:"msg"`
	Data string `thrift:"data,2" form:"data" json:"data" query:"data"`
}

func NewResponse() *Response {
	return &Response{}
}

var Response_Msg_DEFAULT *Msg

func (p *Response) GetMsg() (v *Msg) {
	if !p.IsSetMsg() {
		return Response_Msg_DEFAULT
	}
	return p.Msg
}

func (p *Response) GetData() (v string) {
	return p.Data
}

func (p *Response) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Response(%+v)", *p)
}

type HelloService interface {
	Echo(ctx context.Context, req *Request) (r *Response, err error)

	Get(ctx context.Context) (r *Response, err error)

	GetByParams(ctx context.Context, data string, msg string) (r *Response, err error)

	GetH(ctx context.Context, iD int32) (r *Response, err error)

	Post(ctx context.Context, req *Request) (r *Response, err error)
}
